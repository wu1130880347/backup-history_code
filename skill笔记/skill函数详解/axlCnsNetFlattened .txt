获得一根net是电气约束设定值
  NAME
         axlCnsNetFlattened - get an electricalconstraint associated with a net
  FUNCTION
         axlCnsNetFlattened(
                 o_netDbid/t_netName
                 t_cnsName/s_name
         )
         ==> t_cnsValue/nil
  SYNOPSIS
         If pinpairs areconstrainted by a electrical rule (e.g. PROPAGATION_DELAY),
         the constraints are storedby Allegro on the pinpair not on the net.
         The only electricalconstraints stored on the net are those applied
         to dynamic pinpairs (the use of the AD:AR, L:S, etc. syntax) or
         where the rule applies to the net (e.g. MAX_VIAS).
         
         This interface permits theobtaining a view of constraints in the
         the more traditional netview where explicit pinpairrules
         are rolled up to the net.The returned syntax is what is still
         used by the traditionalnetlisters (both third party and the 3 file
         Cadence netlist).
         The information reported bythe function is the same asreported
         in show element under the "Propertiesattached to net" heading.
         It is also in a format usedby the third party netlist (netin)
         and in the pstxnet.dat file used bynetrev.
         This does not return all constraintvalues applied to the net.
         This means if the constraint isobtained via the electrical constaint
         set (ECSET) or overrides extist at the bus or diffpair level.This
         information is what isreported in show element under the heading:
                 "ElectricalConstraints assigned to net"
         You might ask if we are rolling uppinpairs to the net why this
         API is called "axlCnsNetRollup". The mappingprocess inside Allegro
         is actually calledmaterialization but that is too hard to spell.
         What occurs during thisprocess is Allegro maps Electrical
         constaints from xnets, matched groups, and pin pairs to netsby
         promoting or flattening theelectrical property. The goal
         of this process is topresent a traditional "net view" of the
         constraints and more importantlyprovide compatibility with
         schematic netlisters.
         Additional constraints mayeffect the net via the ECset present
         at either the net, xnet, diffpair or bus level.Additional override
         properties may exist at thediffpair or bus level Use
         axlNetEcsetValueGet if you wish that viewbut it will not flatten
         constraints.
  TIPS
         If requesting multipleconstraints from the same net is is faster to
         obtain get the dbid of thetnet and pass that as firstargument instead
         of using the net name.
  NEEDS
         o_netDbid/t_netName - dbid or name (string) of the net
         t_cnsName - the propertyname for the constraint.
         s_name - symbol name of DRCcheck (values returned by
                         axlCNSEcsetModeGet(nil). These names may not
                         exactly match theproperty name
  RETURNS
         t_cnsValue - the valuereturned as a string
                         exactall
         nil - no value defined for the net
  SEE ALSO
         axlNetEcsetValueGet
  EXAMPLES
         1) get impedance rule by name on net1
                 rule = axlCnsNetFlattened("NET1" "IMPEDANCE_RULE")
         2) get impedance rule by DRC check name onnet1
                 rule = axlCnsNetFlattened("NET1" 'Impedance)
         3) get PROPAGATION_DELAY on MEM_DATA8 usingthe dbid of net
                 net = car(axlSelectByName("NET" "MEM_DATA8"))
                 rule = axlCnsNetFlattened(net "PROPAGATION_DELAY")